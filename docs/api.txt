
=item B<GET /scot/ihcalendar>

 params:        values:
 start          integer seconds since the unix epoch
 end            integer seconds since the unix epoch
 ---
 returns:       JSON
 [  {
        id      :   integer event_id,
        title   :   "username",
        allDay  :   js boolean, always true
        starg   :   string representation of date
    }, ...
 ]

=cut


=item B<GET /scot/current_handler>

 params:        values:
 ---
 returns:       JSON
 {
        incident_handler   :   "username"
 }, ...

=cut


=item B<PUT /scot/ihcalendar/new>

 params:        values:
 handler        "username" string,
 start_date     "MM/DD/YYYY 00:00:00.00",
 end_date       "MM/DD/YYYY 00:00:00.00",
 ---
 returns:       redirect to /ng/incident_handler.html

=cut


=item B<GET /scot/alertgroup/refresh/:id>

 input:         
 id             integer id value of alertgroup we are refreshing display of
 params:        values:
 ---
 returns:       JSON
 { title : "Alertgroup Status Refresh",
   action: "get",
   thing:  "alertgroup",
   id   :  id of the alertgroup being refreshed,
   stime:  time the server took to process request,
   data : {
        views       :   integer count of number of views
        viewed_by   :   {
                            username : { 
                                when    : seconds since unix epoch,
                                count   : number of views by username,
                                from    : ip addr last viewed from,
                            }, ...
                        },
        alertcount  :   integer number of alerts in alertgroup,
        alertgroup_id : integer alertgroup_id
        message_id  :   string of email Message-Id header,
        when        :   int secs since unix epoch,
        created     :   int secs since unix epoch,
        updated     :   int secs since unix epoch,
        alert_ids   :   [ int_alert_id1, inte_alert_id2, ... ],
        status      :   string of a valid status (see Scot::Model::Alertgroup)
        open        :   int number of open alerts in alertgroup,
        closed      :   int number of closed alerts in alertgroup,
        promoted    :   int number of promoted alerts in alertgroup,
        total       :   int number of total alerts in alertgroup,
        subject     :   string representation of the subject
        guide_id    :   int id of the guide for this alert
        source      :   string describing the source
    }

=cut

=item B<POST /scot/ssearch>

 NOTE: this is a simplistic mongo string search
 params:        values:
 query          string
 ---
 returns:   ( slowly :-) ) JSON
 {
    title   :   "Search Results",
    action  :   "post",
    thing   :   "multiple",
    status  :   status of the search
    data    :   {
        tags    : {
            hits    : int,
            data    : [ {
                            tag_id  : int,
                            snippet : string,
                            tagees  : [
                                        { type: string, id: int }, ...
                                      ],
                            matched_on: "tag",
                        },...
                       ]
        },
        entries : {
            hits    : int,
            data    : [
                        {
                            entry_id    : int,
                            target_type : string,
                            target_id   : int,
                            snippet     : string,
                            matched_on  : 'entry body',
                        },...
                      ]
        },
        // not implemented yet...
        alerts:  {
            hits    : int,
            data    : ....
        }
    }
 }

=cut


=item B<PUT /scot/promote>

 params:        values:
 none, but JSON is sent of the form:
 {
    thing   : string, // alert, event,
    id      : [int1, int2,...],
 }
 ---
 returns:       JSON
 {
    title   : "Promote $thing to $target_type",
    action  : "put",
    thing   : $target_type,     // event, incident
    id      : id of promoted thing,
    status  : "ok" | "failed",
    data    : [ 
                {
                    initial     => object type,
                    initial_id  => id of the initial object,
                    final       => object type,
                    final_id    => id of final object,
                },...
              ],
    stimer  : time server took to promote,
 }, ...
 Notifications:
 active_mq: {
    action  : "promotion",
    type    : type of the promotion, // promote an alert, this will be event.
    id      : id of the new promotion object,
 }

=cut


=item B<GET /scot/task >

    params:
        grid={
            start       : int,
            limit       : int,
            sort_ref    : { colname : -1|1 }
        },
        columns=[ col1, col2,...  ],
    input:
    none
    ---
    returns:            JSON:
    {
        title   : "Task List",
        action  : "get",
        thing   : "tasks",
        status  : "ok" | "fail",
        total_records   : int,
        data    : [ 
                    { 
                        entry_id    : id,
                        task        : {
                            when    :   int seconds since epoch,
                            who     :   "username" assigned to task,
                            status  :   "open|assigned|completed",
                        },
                        is_task     : boolean,
                        body        : string,
                        body_flaired    : flaired string,
                        body_plaintext  : plain jane,
                    },...
                  ]
    notifications:
    none

=cut


=item B<GET /scot/entity >

    params:
        match={
            entity_value: "string" or [ "string1", "string2",... ],
            entity_type:  "string" // optional...
        }
    input:
    ---
    returns:
    json:   {
        title       : "SCOT Entity INFO",
        action      : "get",
        thing       : "entity",
        status      : "ok",
        data        : [
                        {
                            entity_id   : int,
                            entity_type : "string",
                            value       : "string",  the entity itself
                            notes       : [
                                            {
                                                who  => "username",
                                                when => int secs,
                                                text => string,
                                            },...
                                          ],
                            alerts      : [ alert_id1, alert_id2,... ],
                            events      : [ event_id1, event_id2,... ],
                            incidents   : [ incident_id1, ... ],
                            geo_data    : {

                            },
                            reputation  : {

                            },
                            block_data  : {

                            },
                        },...
                      ]
    }
    notifications:
    none

=cut


=item B<PUT /scot/entity >

    params:
    none    
    input:      JSON:
    {
        entity_value:   string,
        note        :   string,  "user notes"
    }
    ---
    returns:    JSON
    {
        title   : "SCOT Entity Update",
        action  : "put",
        thing   : "entity",
        status  : "ok" | "fail,
        data    : "reason for fail", # only if status is fail
    }
    notifications:
    none

=cut
 

=item B<GET /scot/entity/entry/:id >

    params:
    none
    input:
    none
    ---
    returns:    JSON:
    {
        title   : "Entity Data for $thing $id",
        thing   : "entity_data",
        target  : $thing,
        id      : $id,
        status  : 'ok',
        stime   : int,
        data    : {
            "entity_value1"  : {
                entity_id   : int,
                entity_type : "string",
                notes       : [ {
                                    who     => username,
                                    when    => secs since epoch,
                                    text    => string,
                                },...
                              ],
                geo_data    : {

                },
                block_data  : {

                },
                reputation  : {

                },
                alerts      : int,
                events      : int,
                incidents   : int,
            },...
        }
    }
    notifications:
    none

=cut

=item B<GET /scot/groups>

    params:
    none
    input:
    none
    ---
    returns:    json:
    {
        title   : "SCOT Group List",
        action  : "get",
        thing   : "scotgroups",
        status  : "ok",
        data    : {
            groups  : [ group1, group2, ... ],
        }
    }
    notifications:
    none

=cut


=item B<GET /scot/whoami >

    params:
    none
    input:
    none
    ---
    returns: json:
    {
        title   : "whoami",
        action  : "whoami",
        user    : $user,
        status  : "no matching user", # if user doesn't exist, else
        data    : {
            user_id     : int,
            username    : string,
            tzpref      : string,
            lastvisit   : int secs since epoch
            theme       : string,
            flair       : href of flair prefs,
            display_orientation : string,
        }
    }
    notifications:
    none

=cut

=item B<GET /scot/file/:id >

    params:
        (optional) download=1
        grid={start:x, limit:y, sort_ref: { col : -1 }}
        columns=[col1,col2,...]
    input:
        none
    ---
    returns:
        if param download=1, then the file is downloaded, else
        {
            title   : "File List",
            action  : "get",
            thing   : "file",
            status  : "ok",
            data    : [ {
                            file_id     : int,
                            scot2_id    : int,
                            notes       : string,
                            entry_id    : int,
                            size        : int,
                            filename    : string,
                            dir         : string,
                            fullname    : string = dir + / + filename
                            md5         : string,
                            sha1        : string,
                            sha256      : string,
                        },...
                    ]
        }
    notifications:
    none

=cut

=item B<POST /file/upload >

    params:
        target_type=string
        target_id=int
        entry_id=int
        notes=string
        readgroups=x,readgroups=y,...
        modifygroups=a,modifygroups=b,...
    input:
    ---
    returns:    json:
    [
        { file: string, status: "ok" | "failed", reason : string if fail },...
    ]
    notifications:
    none

=cut


=item B<PUT /scot/file/:id >

    params:
    input:
    json of attributes to update
    ---
    returns:
    {
        action  : "put"
        thing   : "files",
        id      : $id,
        status  : $status,
    }
    notifications:
    none

=cut


=item B<GET /scot/health >

    params:
    none
    input:
    none
    ---
    returns:
    {
        title   : "Health Check",
        action  : "get",
        thing   : "health",
        status  : "ok",
        data    : {'alert_bot':int, 'etc':int, ... ],
        stimer  : int,
    }
    notifications:
    none

=cut

=item B<GET /scot/tags >

    params:
    none
    input:
    none
    ---
    returns:
    {
        title   : "Tag Autocomplete List",
        action  : "get",
        thing   : "tags",
        status  : "ok",
        data    : [ tag1, tag2, ... ],
        stimer  : int,
    }
    notifications:
    none

=cut

=item B</scot/admin/service>

Status of all services

=cut


=item B<GET /scot/:thing >

    $collection = $thing . "s"

    params:
        grid={start:x, limit:y, sort_ref: { col : -1 }}
        columns=[col1,col2,...]
        filter={col: matchstring},
    input:
    none
    ---
    returns:
    {
        title   : "$collection list",
        actiont : "get",
        thing   : $thing,
        status  : "ok" | "fail"
        stime   : int,
        data    : [ { object1 }, ... ],
        columns : [ col1, col2, ... ],
        total_records : int,
    }
    notifications:
    {
        action  : "view",
        type    : $collection
    }

=cut


=item B<POST /scot/:thing >

    params:
        none    
    input:
    { json object with params listed in thing model }
    ---
    returns:
    {
        action  : "post",
        thing   : $thing,
        id      : new object id
        status  : $status
        reason  : string,
        stime   : int
    }
    notifications:
    {
        action  : "creation"
        type    : $thing
        id      : object id
        target_type : string,   # if entry
        target_id   : int,   # if entry
        is_task     : boolean,   # if entry
    }

=cut


=item B<GET /scot/:thing/:id >

    params:
        grid={start:x, limit:y, sort_ref: { col : -1 }}
        columns=[col1,col2,...]
        filter={col: matchstring},
    input:
    none
    ---
    returns: 
    {
        title   : "View One $thing $id",
        status  : "ok",
        action  : "get_one",
        thing   : $thing,
        id      : $id,
        data    : { hash of object requested }
    }
    notifications:
    none 

=cut


=item B<DEL /scot/:thing/:id >

    params:
    input:
    ---
    returns:
    {
        title   : "Delete $thing",
        action  : "delete",
        thing   : $thing,
        status  : $status,
        reason  : $reason,
        stime   : int,
    }
    notifications:
    {   
        action      : "deletion",
        type        : $thing,
        id          : $id
        target_type : string,   # if entry
        target_id   : int,   # if entry
        is_task     : boolean,   # if entry
    }

=cut


=item B<PUT /scot/:thing/:id >

    params:
    input:
    { json object with params listed in thing model }
    ---
    returns:
    notifications:
    {
        action  : "update",
        type    : $thing,
        id      : $id,
    }

=cut

=item B<GET /scot/viewed/:thing/:id >

    params:
        none
    input:
        none
    ---
    returns:
    {
        title   : "update view count",
        action  : "update_viewcount",
        target  : $thing,
        id      : $id,
        view_count  : new view count int,
        status  : "ok",
    }
    notifications:
    {
        action  : "view",
        viewcount   : int,
        type        : $thing,
        id          : $id,
    }

=cut


=item B<GET /scot/plugin/:type/:value >

    params:
        none
    input:
        none
    ---
    returns:
    {
        data : [
            { 

            },
            {

            }, ...
        ],
    }

=cut


=item B<GET /scot/triage/:time>

Send the alert triage team things updated since :since (seconds epoch)
:collection = all | alerts | events | incidents | entries

=cut
